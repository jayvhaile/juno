package juno.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_BinaryExpression;
  private ConceptPresentation props_BooleanLiteral;
  private ConceptPresentation props_Comment;
  private ConceptPresentation props_EmptyStatement;
  private ConceptPresentation props_Expression;
  private ConceptPresentation props_Field;
  private ConceptPresentation props_FloatLiteral;
  private ConceptPresentation props_Int;
  private ConceptPresentation props_IntLiteral;
  private ConceptPresentation props_Literal;
  private ConceptPresentation props_Record;
  private ConceptPresentation props_RefinedType;
  private ConceptPresentation props_RegexLiteral;
  private ConceptPresentation props_Statement;
  private ConceptPresentation props_StringLiteral;
  private ConceptPresentation props_Type;
  private ConceptPresentation props_Workbook;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BinaryExpression:
        if (props_BinaryExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BinaryExpression");
          props_BinaryExpression = cpb.create();
        }
        return props_BinaryExpression;
      case LanguageConceptSwitch.BooleanLiteral:
        if (props_BooleanLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BooleanLiteral");
          props_BooleanLiteral = cpb.create();
        }
        return props_BooleanLiteral;
      case LanguageConceptSwitch.Comment:
        if (props_Comment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Comment");
          props_Comment = cpb.create();
        }
        return props_Comment;
      case LanguageConceptSwitch.EmptyStatement:
        if (props_EmptyStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EmptyStatement");
          props_EmptyStatement = cpb.create();
        }
        return props_EmptyStatement;
      case LanguageConceptSwitch.Expression:
        if (props_Expression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Expression = cpb.create();
        }
        return props_Expression;
      case LanguageConceptSwitch.Field:
        if (props_Field == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Field = cpb.create();
        }
        return props_Field;
      case LanguageConceptSwitch.FloatLiteral:
        if (props_FloatLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("FloatLiteral");
          props_FloatLiteral = cpb.create();
        }
        return props_FloatLiteral;
      case LanguageConceptSwitch.Int:
        if (props_Int == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Int = cpb.create();
        }
        return props_Int;
      case LanguageConceptSwitch.IntLiteral:
        if (props_IntLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("IntLiteral");
          props_IntLiteral = cpb.create();
        }
        return props_IntLiteral;
      case LanguageConceptSwitch.Literal:
        if (props_Literal == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Literal = cpb.create();
        }
        return props_Literal;
      case LanguageConceptSwitch.Record:
        if (props_Record == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Record = cpb.create();
        }
        return props_Record;
      case LanguageConceptSwitch.RefinedType:
        if (props_RefinedType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RefinedType = cpb.create();
        }
        return props_RefinedType;
      case LanguageConceptSwitch.RegexLiteral:
        if (props_RegexLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("RegexLiteral");
          props_RegexLiteral = cpb.create();
        }
        return props_RegexLiteral;
      case LanguageConceptSwitch.Statement:
        if (props_Statement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Statement = cpb.create();
        }
        return props_Statement;
      case LanguageConceptSwitch.StringLiteral:
        if (props_StringLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StringLiteral");
          props_StringLiteral = cpb.create();
        }
        return props_StringLiteral;
      case LanguageConceptSwitch.Type:
        if (props_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Type = cpb.create();
        }
        return props_Type;
      case LanguageConceptSwitch.Workbook:
        if (props_Workbook == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Workbook = cpb.create();
        }
        return props_Workbook;
    }
    return null;
  }
}
